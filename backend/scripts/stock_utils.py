# Generated by Django 4.1.7 on 2023-03-25 02:14

from dotenv import load_dotenv
import time
import datetime
import os
import json
import requests
from backend.models import Stock
from django.db import transaction
import pandas as pd

# Confirgure API Key
load_dotenv()
polygonAPIkey = str(os.environ.get('polygonAPIkey'))
keystr = str(os.environ.get('keystr'))

headers = {}
params = {}

@transaction.atomic
def fetch_StockDetails(ticker):
    print("Fetching StockDetailsV3: ", ticker, "...")

    with requests.Session() as s:
        while True:
            try:
                url = str("https://api.polygon.io/v3/reference/tickers/" +
                        str(ticker) + "?apiKey=" + polygonAPIkey)
                r = s.get(url, headers=headers, params=params)
                # print("StockDetailsV3 Response Code " + str(r4.status_code))
                stockdetailsv3 = json.loads(r.content)

                if r.status_code == 403:
                    print("Not Authorized. Check the API Key")
                    time.sleep(5)
                    break

                if r.status_code == 429:
                    print("API Limit. Please wait...")
                    time.sleep(15)
                    continue

                if r.status_code == 200:

                    if 'results' in stockdetailsv3 and stockdetailsv3['results']:
                        stock_name = stockdetailsv3['results']['name']

                        # Checking for logo & icon
                        if 'branding' in stockdetailsv3['results']:
                            if 'icon_url' in stockdetailsv3['results']['branding']:
                                brandicon=stockdetailsv3['results']['branding']['icon_url'] + keystr
                            if 'logo_url' in stockdetailsv3['results']['branding']:
                                brandlogo=stockdetailsv3['results']['branding']['logo_url'] + keystr
                        else:
                            brandicon = "No Icon Available"
                            brandlogo = "No Logo Available"

                        if 'homepage_url' in stockdetailsv3['results']:
                            weburl = stockdetailsv3['results']['homepage_url']
                        else:
                            weburl = "#"

                        if 'description' in stockdetailsv3['results']:
                            description = stockdetailsv3['results']['description']
                        else:
                            description = "No Description"

                        # description = stockdetailsv3['results']['description']
                        print("StockDetailsV3 Complete!")

                        return {
                            'ticker': ticker,
                            'stock_name': stock_name,
                            'brandicon': brandicon,
                            'brandlogo': brandlogo,
                            'weburl': weburl,
                            'description': description
                        }
                else:
                    print(f"Unexpected status code for {ticker}: {r.status_code}")
                    break

            except Exception as e:
                print(f"{r.status_code}: An unexpected error occurred for {ticker}: {e}")

        return {}

@transaction.atomic
def fetch_PreviousClose(ticker):
    print("Fetching PreviousClose: ", ticker, "...")

    with requests.Session() as s:
        while True:
            try:
                url = str("https://api.polygon.io/v2/aggs/ticker/" + str(ticker) + 
                        "/prev?adjusted=true&apiKey=" + polygonAPIkey)
                r = s.get(url, headers=headers, params=params)
                # print("Previous Close (OHLC): Code " + str(r3.status_code))
                previousclose = json.loads(r.content)

                if r.status_code == 403:
                    print("Not Authorized. Check the API Key")
                    time.sleep(5)
                    break

                if r.status_code == 429:
                    print("API Limit. Please wait...")
                    time.sleep(15)
                    continue

                if r.status_code == 200:
                    if 'results' in previousclose and previousclose['results']:
                        previous_close = previousclose['results'][0]
                        previous_date = datetime.datetime.fromtimestamp(
                            previous_close['t']/1000).date()
                        closep = previous_close['c']

                        print("PreviousClose Complete!")

                        return {
                            'previous_date': previous_date,
                            'closep': closep,
                        }
                else:
                    print(f"Unexpected status code for {ticker}: {r.status_code}")
                    break

            except Exception as e:
                print(f"{r.status_code}: An unexpected error occurred for {ticker}: {e}")
                break

        return {}


def get_previous_business_day():
    today = pd.Timestamp.today()
    previous_business_day = pd.bdate_range(end=today, periods=2)[
        0]  # Get the previous business day
    return previous_business_day.date()

@transaction.atomic
def update_AllPreviousClose():
    print("Updating AllPreviousClose ...")

    previous_business_day = get_previous_business_day()
    try:
        for stock in Stock.objects.all():
            if stock.previous_date != previous_business_day:
                previous_close = fetch_PreviousClose(str(stock.symbol))
                stock.previous_date = previous_close['previous_date']
                stock.closep = previous_close['closep']
                stock.save()
                break
            else:
                print("Previous Close Price is up to date.")
                break

    except Exception as e:
        print(
            f"An unexpected error occurred for: {e}")

    return {}

@transaction.atomic
def fetch_RelatedCompanies(ticker):
    print("Fetching RelatedCompanies: ", ticker, "...")

    with requests.Session() as s:
        while True:
            try:
                url = str("https://api.polygon.io/v1/related-companies/" +
                        str(ticker) + "?&apiKey=" + polygonAPIkey)
                r = s.get(url, headers=headers, params=params)
                related_companies = json.loads(r.content)
                # print("Related Companies Info: Code " + str(r2.status_code))
                time.sleep(12)  # 5 reqests per minute for free
                # print(related_companies)
                if r.status_code == 403:
                    print("Not Authorized. Check the API Key")
                    time.sleep(5)
                    break

                if r.status_code == 429:
                    print("API Limit. Please wait...")
                    time.sleep(15)
                    continue

                if r.status_code == 200:
                    if 'results' in related_companies and related_companies['results']:
                        related_tickers = related_companies['results']
                        related_tickers = [ticker['ticker'] for ticker in related_tickers]
                        tickers_str = json.dumps(related_tickers)
                        related_tickers = tickers_str
                        print("Related Companies Complete!")
                        break
                    else:
                        related_tickers = "No Related Tickers"
                        print (related_tickers)
                        break
                else:
                    print(f"Unexpected status code for {ticker}: {r.status_code}")
                    break

            except Exception as e:
                print(f"{r.status_code}: An unexpected error occurred for {ticker}: {e}")
                break

    return {
        'related_tickers': related_tickers,
    }

@transaction.atomic
def fetch_Dividends(ticker):
    print("Fetching Dividends: ", ticker, "...")

    with requests.Session() as s:
        while True:
            try:
                url = str("https://api.polygon.io/v3/reference/dividends?ticker=" +
                        str(ticker) + "&limit=1&apiKey=" + polygonAPIkey)
                r = s.get(url, headers=headers, params=params)
                dividends = json.loads(r.content)
                # print("Dividends Info: Code " + str(r2.status_code))
                time.sleep(12) # 5 reqests per minute for free
                # print(dividends)
                if r.status_code == 403:
                    print("Not Authorized. Check the API Key")
                    time.sleep(5)
                    break

                if r.status_code == 429:
                    print("API Limit. Please wait...")
                    time.sleep(15)
                    continue

                if r.status_code == 200:
                    if 'results' in dividends and dividends['results']:
                        recent_dividends = dividends['results'][0] # Access the most recent results
                        cash_amount = recent_dividends['cash_amount']
                        divfrequency = recent_dividends['frequency']
                        pay_date = recent_dividends['pay_date']
                        declaration_date = recent_dividends['declaration_date']
                        ex_dividend_date = recent_dividends['ex_dividend_date']

                        print("Dividends Complete!")

                        return {
                            'cash_amount': cash_amount,
                            'divfrequency': divfrequency,
                            'pay_date': pay_date,
                            'declaration_date': declaration_date,
                            'ex_dividend_date': ex_dividend_date,
                        }
                    else:
                        print("No Dividends Available")
                        return {
                            'cash_amount': 0,
                            'divfrequency': 0,
                            'pay_date': 0,
                            'declaration_date': 0,
                            'ex_dividend_date': 0,
                        }

                print(f"Unexpected status code for {ticker}: {r.status_code}")
                break

            except Exception as e:
                print(
                    f"{r.status_code}: An unexpected error occurred for {ticker}: {e}")
                break

        return {}

@transaction.atomic
def create_NewStock(ticker):
    print("Creating NewStock: ", ticker, "...")

    try:
        stock_details = fetch_StockDetails(ticker)

        previous_close = fetch_PreviousClose(ticker)

        related_tickers = fetch_RelatedCompanies(ticker)

        stock_dividends = fetch_Dividends(ticker)

        stock = Stock.objects.create (
            symbol=stock_details['ticker'],
            stock_name=stock_details['stock_name'],
            brandicon=stock_details['brandicon'],
            brandlogo=stock_details['brandlogo'],
            weburl=stock_details['weburl'],
            description=stock_details['description'],
            closep=previous_close['closep'],
            previous_date=previous_close['previous_date'],
            related_tickers=related_tickers['related_tickers'],
            cash_amount=stock_dividends['cash_amount'],
            divfrequency=stock_dividends['divfrequency'],
            pay_date=stock_dividends['pay_date'],
            declaration_date=stock_dividends['declaration_date'],
            ex_dividend_date=stock_dividends['ex_dividend_date'],)

        stock.save()

        print("Success! " + str(stock.symbol))

    except Exception as e:
        print(f"Error creating {ticker}: {e}")

    return stock
