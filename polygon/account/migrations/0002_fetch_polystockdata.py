# Generated by Django 4.1.7 on 2023-03-25 02:14

from django.db import migrations
# from django.db.migrations import apps
from django.apps import apps

from account.models import *
import requests, json, os, datetime, time

from dotenv import load_dotenv

# Confirgure API Key
load_dotenv()
polygonAPIkey = str(os.environ.get('polygonAPIkey'))
keystr = str(os.environ.get('keystr'))


headers = {}     
params = {}
watchlist = ['AAPL','ADP','AIG','AVGO','BAC','BBY','CL','COST','ESS','GE','GS',
                 'HD','HPQ','IBM','INTC','JEPI','JNJ','JPM','KO','LOW','MCD','MMM','MSFT',
                 'NEE','NVDA','O','PEP','PG','QCOM','QYLD','SCHD','SPGI','SPY','SYY','TGT',
                 'UWMC','VFC','VOO','VTI','VZ','WFC','WMT','XOM']

def fetch_ALL_polystockdata(apps, schema_editor):
    """
        Update database by deleting all records then 
        fetch updated stock details from Polygon API

        Delete all then Create new records 
    """
    # Stock.objects.all().delete()

    print("\nFetching Polygon stock data....")
    # print(polygonAPIkey, keystr)  

    with requests.Session() as s:
        for ticker in watchlist:
            # stock = Stock(symbol=ticker)
            # 
            # STOCK DETAILS V3 
            # 
            print("StockDetailsV3 Loading... // ", ticker)
            url4 = str("https://api.polygon.io/v3/reference/tickers/" + 
                       str(ticker) + "?apiKey=" + polygonAPIkey)
            r4 = s.get(url4, headers=headers, params=params)
            # print("Stock Details V3: Code " + str(r4.status_code))
            stockdetailsv3 = json.loads(r4.content)

            if r4.status_code == 403:
                print("Not Authorized..")
                time.sleep(5)

            if r4.status_code == 429:
                print("Please wait...")
                time.sleep(15)

            if r4.status_code == 200:
                stock_type = stockdetailsv3['results']['type']
                stock_name = stockdetailsv3['results']['name']

                if 'branding' in stockdetailsv3['results']:
                    if 'icon_url' in stockdetailsv3['results']['branding']:
                        brandicon = stockdetailsv3['results']['branding']['icon_url'] + keystr
                    if 'logo_url' in stockdetailsv3['results']['branding']:
                        brandlogo = stockdetailsv3['results']['branding']['logo_url'] + keystr
                else:
                    brandicon = "No Icon Available"
                    brandlogo = "No Logo Available"

                if 'homepage_url' in stockdetailsv3['results']:
                    weburl = stockdetailsv3['results']['homepage_url']
                else: 
                    weburl = "#"

                if 'description' in stockdetailsv3['results']:
                    description = stockdetailsv3['results']['description']
                else: 
                    description = "No Description "

                # description = stockdetailsv3['results']['description']
                print("StockDetailsV3 Complete!")

                # 
                # PREVIOUS CLOSE
                # 
                print("PreviousClose Loading...")
                url3 = str("https://api.polygon.io/v2/aggs/ticker/" + str(ticker) + 
                           "/prev?adjusted=true&apiKey=" + polygonAPIkey)
                r3 = s.get(url3, headers=headers, params=params)
                # print("Previous Close (OHLC): Code " + str(r3.status_code))
                previousclose = json.loads(r3.content)

                if r3.status_code == 403:
                    print("Not Authorized..")
                    time.sleep(5)

                if r3.status_code == 429:
                    print("Please wait...")
                    time.sleep(15)

                if r3.status_code == 200:
                    for price in previousclose['results']:
                        # print(price)
                        previous_date = datetime.datetime.fromtimestamp(price['t']/1000).date()
                        closep = price['c']
                        print("PreviousClose Complete!")

                    # 
                    # DIVIDENDS
                    # 
                    print("Dividends Loading...")
                    url2 = str("https://api.polygon.io/v3/reference/dividends?ticker=" + 
                               str(ticker) + "&limit=1&apiKey=" + polygonAPIkey)
                    r2 = s.get(url2, headers=headers, params=params)
                    dividends = json.loads(r2.content)
                    # print("Dividends Info: Code " + str(r2.status_code))
                    time.sleep(12) # 5 reqests per minute for free
                    # print(dividends)
                    if r2.status_code == 403:
                        print("Not Authorized..")
                        time.sleep(5)

                    if r2.status_code == 429:
                        print("Please wait...")
                        time.sleep(15)

                    if r2.status_code == 200:
                        print("Dividends Complete!")
                        for stockd in dividends['results']: # Shows last 10 dividend payouts
                            try:
                                stock = Stock.objects.create(symbol = stockd['ticker'],
                                                    stock_name = stockdetailsv3['results']['name'],
                                                    stock_type = stockdetailsv3['results']['type'],
                                                    weburl = weburl,
                                                    closep = closep,
                                                    previous_date = previous_date,
                                                    brandicon = brandicon,
                                                    brandlogo = brandlogo,
                                                    description = description,
                                                    cash_amount = stockd['cash_amount'],
                                                    divfrequency = stockd['frequency'],
                                                    pay_date = stockd['pay_date'],
                                                    declaration_date = stockd['declaration_date'],
                                                    ex_dividend_date = stockd['ex_dividend_date'])
                                # print(str(symbol) + ": " + str(closep) + " |
                                # D: " + str(cash_amount) + " | F: " + str(divfrequency) +
                                # " | PD: " + str(pay_date) + " | ExD: " + str(ex_dividend_date))
                                print(stock)
                            except OSError as e:
                                print("Error creating new record: ", e)
        print("Complete!")


class Migration(migrations.Migration):
    """
        Custom makemigration command to run fetch_polystockdata function
    """

    dependencies = [
        ('account', '0001_initial'),
    ]

    operations = [
        # Custom makemigration command
        # ('fetch_polystockdata', 'account.management.commands.fetch_polystockdata'),
        migrations.RunPython(fetch_ALL_polystockdata),
    ]
