"""
Create your views for handling HTTP Requests also anything where the html will directly interact with

- 1/22 working on load_stockdata. creating a record and django object. 
ERROR: Internal Server Error: AttributeError: 'NoneType' object has no attribute 'attname'
FIXED IT!! THe stock data is storing in the database properly now.
- I was able to add a couple pages and organize the Models and Views files but not the 
original function to call Polygon API has not worked since 5pm today. It's now 10pm. Not sure how it broke

"""
from django.shortcuts import render

from .models import *

from polygon import *
import pandas as pd
import os, requests, json, datetime, time
from datetime import datetime, date, timedelta
import sqlite3 as sql

# api key from config 
# from apikey import *
# OR just assign your API as a string variable
polygonAPIkey = '4US5e1obpxTqaWTTG6c6qGiHeK6O6TG3'

keystr = '?apiKey=4US5e1obpxTqaWTTG6c6qGiHeK6O6TG3'


# ImproperlyConfigured( django.core.exceptions.ImproperlyConfigured: Requested setting USE_I18N
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'account.settings')

# import modules

headers = {}      
params = {}

holidays = ["2023-01-16","2023-02-20","2023-04-07","2023-05-29","2023-06-19","2023-07-03","2023-07-04","2023-09-04","2023-11-23","2023-11-24","2023-12-25","2024-01-01","2023-01-16","2023-02-20","2023-04-07","2023-05-29","2023-06-19","2023-07-03","2023-07-04","2023-09-04","2023-11-23","2023-11-24","2023-12-25","2024-01-01"]

# timeframe = date.today() - timedelta(days=1)# have to check for dates the market is open. -1 to make sure weekday() is in range also can only view previous days details 
# # daynum = date.today().day # day of the month 
# weekdayint = timeframe.weekday() # day of the week 
# print("Weekday Int:" + str(weekdayint))
# print(timeframe) 


# ------- START Render Templates to pages ---------
def view_router(request):
    print("Made it")
    if request.method == 'POST':
        if 'search_stocksymbol' in request.POST:
            search_stocksymbol = request.POST.get('search_stocksymbol')
            print(search_stocksymbol)
            return HttpResponse("Searching...")
        # elif 'form2' in request.POST:
        #     form2_data = request.POST.get('form2_data')
        #     # do something with form2_data
        #     return HttpResponse("form2 is submitted")
    else:
        return render(request, 'template.html')

def dashboard(request):
    print("Dashboard")
    data = Stock.objects.all()
    if data == '':
        print("No Data Found in Database.")
        data = ['AAPL','UMWC','JEPI', 'PG','O']
    print(data)
    return render(request, 'dashboard.html', {'watchlist':data})

def profile(request):
    users = User()
    print("Profile")
    return render(request, 'profile.html', {'users':users})

def stockdetails(request, symbol):
    if request.method == 'POST':
        symbol = request.POST.get('search_symbol')
        print("Search Symbol: ", symbol)
    # data = request.POST.dict()
    # print(data)
    # search_stocksymbol = request.POST.get("search_stocksymbol")
    if symbol in watchlist_from_db():
        print("stockdetails: Found - ",symbol)
        # Works for Dashboard & Stock Details but Load_Stockdata not working
        return render(request, 'stockdetails.html', {'stock': get_stockdetails(symbol)})
        
    else:
        print("stockdetails: Not Found - ",symbol)
        return home(request)

    # Works only for Dashboard
    # stock = get_stockdetails(symbol)
    # print("stockdetails stock",stock)
    # if stock == None:
    #     return render(request, 'stockdetails.html', {'stock':stock})
    # else:
    #     return render(request, 'stockdetails.html')

def get_stockdata_polygon(request, symbol):
    print("Made it: load_stockdata_polygon")
    data = call_polygondata()
    # return render(request, 'load_stockdata.html', {'watchlist':data})
    return render(request, 'home.html')
    
def home(request):
    print("Home")
    return render(request, 'home.html')

# ------- END Render Templates to pages ---------

# # ------- START Pologon API calls ---------
# def set_timeframe(timeframe):
#     if weekdayint >= 5 :
#         print("It's a weekend. Checking previous days...")
#         if weekdayint == 5: # it's saturday
#             timeframe = timeframe - timedelta(days=1)
#             print(str("Saturday - 1 day: " + timeframe))
#             return(timeframe) 
#         else:  # it's sunday
#             timeframe = timeframe - timedelta(days=2)
#             print(str("Sunday - 2 days: " + timeframe))
#             return(timeframe)
#     else: 
#         if weekdayint < 5 and timeframe in holidays: # It is a weekday / Check for a holiday
#             print("Happy Holiday! Checking previous days...")
#             timeframe = timeframe - timedelta(days=1)
#             set_timeframe(timeframe) 

#         if weekdayint < 5:
#             print(str("Today: "  + date.today()))
#             # print(str(timeframe)) 
#             return(timeframe) # Using yesterday's numbers for free

# https://stackoverflow.com/questions/42037593/third-party-api-integration-in-python-django

def load_polygondata():
    print("Made it: load_polygondata")
    # render(request, 'load_polygondata - loading screen.html')
    with requests.Session() as s:
        # timeframe = set_timeframe(timeframe)
        # url1 = str("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/" + str(timeframe) + "?adjusted=true&apiKey=" + polygonAPIkey)
        # r1 = s.get(url1, headers=headers, params=params)
        # print("Entire Stock Market (OHLC): Code " + str(r1.status_code))

        # if r1.status_code == 403:
        #     print("Not Authorized..")
        #     time.sleep(5)

        # if r1.status_code == 200:
            # groupeddailybars = json.loads(r1.content)
            # print("Loading...")
            # print(groupeddailybars)
            # for stock in groupeddailybars['results']:
                # if stock['T'] in watchlist: # If I am watching the stock, I need more info
        for ticker in watchlist_from_db():
            url3 = str("https://api.polygon.io/v2/aggs/ticker/" + str(ticker) + "/prev?adjusted=true&apiKey=" + polygonAPIkey)
            r3 = s.get(url3, headers=headers, params=params)
            # print("Previous Close (OHLC): Code " + str(r3.status_code))
            # print(stock['T'] + " : loading...")
            previousclose = json.loads(r3.content)

            if r3.status_code == 403:
                print("Not Authorized..")
                time.sleep(5)

            if r3.status_code == 429:
                print("Please wait...")
                time.sleep(15)

            if r3.status_code == 200:
                for price in previousclose['results']:
                    previous_date = datetime.datetime.fromtimestamp(price['t']/1000).date()

                        # con = sql.connect("db.sqlite3")
                        # cur = con.cursor()
                        # cur.execute("SELECT symbol FROM account_stock WHERE previous_date = ?", (previous_date,))
                        # expired_stocks = cur.fetchall()
                        
                        # if expired_stocks == []:
                        #     print("All info is up to date.")
                        #     print(expired_stocks)
                        #     con.close()
                        #     return home(request)
                        #     time.sleep(5)
                        #     break

                        # else:
                        #     print("Need to update expired stocks...Proceeding")
                        #     print(expired_stocks[0][0])
                    closep = price['c']
                
                    # time.sleep(12) # 5 reqests per minute for free
                    url2 = str("https://api.polygon.io/v3/reference/dividends?ticker=" + str(ticker) + "&limit=1&apiKey=" + polygonAPIkey)
                    r2 = s.get(url2, headers=headers, params=params)
                    dividends = json.loads(r2.content)
                    # print("Dividends Info: Code " + str(r2.status_code))
                    time.sleep(12) # 5 reqests per minute for free
                    # print(dividends)
                    if r2.status_code == 403:
                        print("Not Authorized..")
                        time.sleep(5)

                    if r2.status_code == 429:
                        print("Please wait...")
                        time.sleep(15)

                    if r2.status_code == 200:
                        # print("Made it")
                        # dividends = json.loads(r2.content)
                        # print(groupeddailybars)
                        for stockd in dividends['results']: # Shows last 10 dividend payouts
                            symbol = stockd['ticker']
                            # closep = stock['c']
                            cash_amount = stockd['cash_amount']
                            divfrequency = stockd['frequency']
                            pay_date = stockd['pay_date']
                            declaration_date = stockd['declaration_date']
                            ex_dividend_date = stockd['ex_dividend_date']
                            print(str(symbol) + ": " + str(closep) + " | D: " + str(cash_amount) + " | F: " + str(divfrequency) + " | PD: " + str(pay_date) + " | ExD: " + str(ex_dividend_date))
        print("Complete!")

# ------- END Pologon API calls ---------