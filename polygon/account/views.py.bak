"""
Create your views for handling HTTP Requests also anything where the html will directly interact with

- 1/22 working on load_stockdata. creating a record and django object. 
ERROR: Internal Server Error: AttributeError: 'NoneType' object has no attribute 'attname'
FIXED IT!! THe stock data is storing in the database properly now.
- I was able to add a couple pages and organize the Models and Views files but not the 
original function to call Polygon API has not worked since 5pm today. It's now 10pm. Not sure how it broke

"""
from django.shortcuts import render

from .models import *

from polygon import *
import pandas as pd
import os, requests, json, datetime, time
from datetime import datetime, date, timedelta
import sqlite3 as sql

# api key from config 
# from apikey import polygonAPIkey
# OR just assign your API as a string variable
polygonAPIkey = '4US5e1obpxTqaWTTG6c6qGiHeK6O6TG3'

# import modules

headers = {}      
params = {}

holidays = ["2023-01-16","2023-02-20","2023-04-07","2023-05-29","2023-06-19","2023-07-03","2023-07-04","2023-09-04","2023-11-23","2023-11-24","2023-12-25","2024-01-01","2023-01-16","2023-02-20","2023-04-07","2023-05-29","2023-06-19","2023-07-03","2023-07-04","2023-09-04","2023-11-23","2023-11-24","2023-12-25","2024-01-01"]

timeframe = date.today() - timedelta(days=1)# have to check for dates the market is open. -1 to make sure weekday() is in range also can only view previous days details 
# daynum = date.today().day # day of the month 
weekdayint = timeframe.weekday() # day of the week 
# print("Weekday Int:" + str(weekdayint))
# print(timeframe) 


# ------- START Render Templates to pages ---------

def dashboard(request):
    data = Stock.objects.all()
    return render(request, 'dashboard.html', {'watchlist':data})

def profile(request):
    users = User()
    return render(request, 'profile.html', {'users':users})

def stockdetails(request, symbol):
    print("stockdetails: ",symbol)
    # Works for Dashboard & Stock Details but Load_Stockdata not working
    return render(request, 'stockdetails.html', {'stock': get_stockdetails(symbol)})

    # Works only for Dashboard
    # stock = get_stockdetails(symbol)
    # print("stockdetails stock",stock)
    # if stock == None:
    #     return render(request, 'stockdetails.html', {'stock':stock})
    # else:
    #     return render(request, 'stockdetails.html')

def get_stockdata_polygon(request, symbol):
    print("Made it: load_stockdata")
    data = call_polygondata()
    # return render(request, 'load_stockdata.html', {'watchlist':data})
    return render(request, 'home.html')
    
def home(request):
    return render(request, 'home.html')

# ------- END Render Templates to pages ---------

# ------- START Pologon API calls ---------
def set_timeframe(timeframe):
    if weekdayint >= 5 :
        print("It's a weekend. Checking previous days...")
        if weekdayint == 5: # it's saturday
            timeframe = timeframe - timedelta(days=1)
            print(str("Saturday - 1 day: " + timeframe))
            return(timeframe) 
        else:  # it's sunday
            timeframe = timeframe - timedelta(days=2)
            print(str("Sunday - 2 days: " + timeframe))
            return(timeframe)
    else: 
        if weekdayint < 5 and timeframe in holidays: # It is a weekday / Check for a holiday
            print("Happy Holiday! Checking previous days...")
            timeframe = timeframe - timedelta(days=1)
            set_timeframe(timeframe) 

        if weekdayint < 5:
            print(str("Today: "  + date.today()))
            # print(str(timeframe)) 
            return(timeframe) # Using yesterday's numbers for free

# https://stackoverflow.com/questions/42037593/third-party-api-integration-in-python-django

def get_statuscode(r):
    if r.status_code == 403:
        print("Not Authorized.")
        time.sleep(5)

    if r.status_code == 429:
        print("Please wait...")
        time.sleep(60)

    if r.status_code == 200:
        print("Proceeding.. 200")
        return statuscode

def get_previousclose (ticker):
    with requests.Session() as s:
        url = str("https://api.polygon.io/v2/aggs/ticker/" + str(ticker) + "/prev?adjusted=true&apiKey=" + polygonAPIkey)
        r = s.get(url, headers=headers, params=params)
        print("Previous Close (OHLC): Code " + str(r.status_code))
        previousclose = json.loads(r.content)
        # print(previousclose)
        if get_statuscode(r) == 200:
            return previousclose

def get_dividendsinfo (ticker):
    with requests.Session() as s:
        url = str("https://api.polygon.io/v3/reference/dividends?ticker=" + str(ticker) + "&limit=1&apiKey=" + polygonAPIkey)
        r = s.get(url, headers=headers, params=params)
        print("Dividends Info: Code " + str(r2.status_code))
        dividends = json.loads(r.content)
        time.sleep(12) 
        # print(dividends)
        if get_statuscode(r) == 200:
            return dividends

def call_polygondata (request):
    print("Made it : call_polygondata")
    watchlist = watchlist()
    for ticker in watchlist:
        # url = str("https://api.polygon.io/v2/aggs/ticker/" + str(ticker) + "/prev?adjusted=true&apiKey=" + polygonAPIkey)
        # r3 = s.get(url3, headers=headers, params=params)
        # print("Previous Close (OHLC): Code " + str(r3.status_code))
        # previousclose = json.loads(r3.content)
        # previousclose = get_previousclose(ticker)
        for price in get_previousclose(ticker)['results']:
            # Check previous close date - Info is current

            # url2 = str("https://api.polygon.io/v3/reference/dividends?ticker=" + str(ticker) + "&limit=1&apiKey=" + polygonAPIkey)
            # r2 = s.get(url2, headers=headers, params=params)
            # dividends = json.loads(r2.content)
            # dividends = get_dividendsinfo(ticker)
            # print("Dividends Info: Code " + str(r2.status_code))
            time.sleep(12) 
            # print(dividends)
            for stockd in get_dividendsinfo(ticker)['results']: # Shows last 10 dividend payouts by default
                # symbol = stockd['ticker']
                # closep = price['c']
                # cash_amount = stockd['cash_amount']
                # divfrequency = stockd['frequency']
                # pay_date = stockd['pay_date']
                # declaration_date = stockd['declaration_date']
                # ex_dividend_date = stockd['ex_dividend_date']
                # previous_date = datetime.fromtimestamp(price['t']/1000).date()
                # print(str(symbol) + ": " + str(closep) + " | D: " + str(cash_amount) + " | F: " + str(divfrequency) + " | PD: " + str(pay_date) + " | ExD: " + str(ex_dividend_date) + " | PD: " + str(previous_date))                            
                stock = Stock.objects.create(symbol=stockd['ticker'], 
                                            closep=price['c'], 
                                            cash_amount=stockd['cash_amount'], 
                                            divfrequency=stockd['frequency'], 
                                            pay_date=stockd['pay_date'],
                                            declaration_date=stockd['declaration_date'],
                                            ex_dividend_date=stockd['ex_dividend_date'],
                                            previous_date=datetime.fromtimestamp(price['t']/1000).date())
                # stocklist = []
                print(stock)
    return Stock.objects.all()
                                                    

        # timeframe = set_timeframe(timeframe)
        # url1 = str("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/" + str(timeframe) + "?adjusted=true&apiKey=" + polygonAPIkey)
        # r1 = s.get(url1, headers=headers, params=params)
        # print("Entire Stock Market (OHLC): Code " + str(r1.status_code))

# ------- END Pologon API calls ---------